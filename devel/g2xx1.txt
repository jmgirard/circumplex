library(MASS)
library(boot)
library(circular)
library(moments)

# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0.1
dom_def <- 0
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2101_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2101_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2101_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2101_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2101_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2101_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2101_500.txt", sep="\t", dec=",")





# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0.1
dom_def <- 0.1
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2111_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2111_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2111_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2111_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2111_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2111_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2111_500.txt", sep="\t", dec=",")





# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0.1
dom_def <- 0.2
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2121_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2121_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2121_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2121_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2121_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2121_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2121_500.txt", sep="\t", dec=",")



# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0.2
dom_def <- 0
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2201_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2201_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2201_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2201_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2201_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2201_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2201_500.txt", sep="\t", dec=",")





# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0.2
dom_def <- 0.1
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2211_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2211_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2211_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2211_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2211_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2211_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2211_500.txt", sep="\t", dec=",")





# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0.2
dom_def <- 0.2
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2221_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2221_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2221_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2221_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2221_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2221_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2221_500.txt", sep="\t", dec=",")




# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0
dom_def <- 0
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2001_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2001_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2001_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2001_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2001_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2001_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2001_500.txt", sep="\t", dec=",")





# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0
dom_def <- 0.1
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2011_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2011_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2011_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2011_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2011_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2011_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2011_500.txt", sep="\t", dec=",")





# Defining circumplex summary statistics
elev_def <- 0.2
lov_def <- 0
dom_def <- 0.2
goodness_def <- 1

# Computing octant correlations for target variable
p7 <- sqrt(2)/2
tv <- c(8)
tv[1] <- elev_def + dom_def
tv[2] <- elev_def - p7*lov_def + p7*dom_def
tv[3] <- elev_def - lov_def
tv[4] <- elev_def - p7*lov_def - p7*dom_def
tv[5] <- elev_def - dom_def
tv[6] <- elev_def + p7*lov_def - p7*dom_def
tv[7] <- elev_def + lov_def
tv[8] <- elev_def + p7*lov_def + p7*dom_def
error <- sqrt(((var(tv)*7-goodness_def*var(tv)*7)/goodness_def)/8)
target <- c(8)
target[1] <- tv[1] - error
target[2] <- tv[2] + error
target[3] <- tv[3] + error
target[4] <- tv[4] - error
target[5] <- tv[5] - error
target[6] <- tv[6] + error
target[7] <- tv[7] + error
target[8] <- tv[8] - error





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 25          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2021_25.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 50          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2021_50.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 75          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2021_75.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 100          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2021_100.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 150          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2021_150.txt", sep="\t", dec=",")





# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 200          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2021_200.txt", sep="\t", dec=",")






# Defining sampling parameters
populationsize <- 100000    # Size of population (N)
samplesize <- 500          # Size of samples (n)
numbsamp <- 5000           # Number of samples drawn from population
numbboot <- 2000          # Number of resamples used for bootstrapping


# Generating circumplex matrix and population
sigma.t <- matrix(c
(1, target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
target[1], 1, .683, .500, .345, .288, .345, .500, .683,
target[2], .683, 1,  .683, .500, .345, .288, .345, .500,
target[3], .500, .683, 1, .683, .500, .345, .288, .345,
target[4], .345, .500, .683, 1, .683, .500, .345, .288,
target[5], .288, .345, .500, .683, 1, .683, .500, .345,
target[6], .345, .288, .345, .500, .683, 1, .683, .500,
target[7], .500, .345, .288, .345, .500, .683, 1, .683,
target[8], .683, .500, .345, .288, .345, .500, .683, 1),9,9)
mu <- c(0,0,0,0,0,0,0,0,0)
population <- data.frame(mvrnorm(populationsize, mu, sigma.t, tol = 0.1, empirical = TRUE))
sigma.e <- cor(population)

# Computing deviance between theoretical and empirical correlations in population
target.match <- sum(abs(sigma.t[1,2:9] - sigma.e[1,2:9]))/8
ipc.match <- sum(abs(sigma.t[2:9,2:9] - sigma.e[2:9,2:9]))/56

# Computing population variables
elev_pop <- mean(sigma.e[1,2:9])
lov_pop <- .25*(-p7*sigma.e[1,3]-sigma.e[1,4]-p7*sigma.e[1,5]+p7*sigma.e[1,7]+sigma.e[1,8]+p7*sigma.e[1,9])
dom_pop <- .25*(sigma.e[1,2]+p7*sigma.e[1,3]-p7*sigma.e[1,5]- sigma.e[1,6]-p7*sigma.e[1,7]+p7*sigma.e[1,9])
ampli_pop <- sqrt(lov_pop^2+dom_pop^2)
angle_pop <- atan2(dom_pop,lov_pop)*45/atan(1)
goodness_pop <- 1-(((elev_pop+ampli_pop*cos((90-angle_pop)*atan(1)/45))-sigma.e[1,2])^2+((elev_pop+ampli_pop*cos((135-angle_pop)*atan(1)/45))-sigma.e[1,3])^2+((elev_pop+ampli_pop*cos((180-angle_pop)*atan(1)/45))-sigma.e[1,4])^2+((elev_pop+ampli_pop*cos((225-angle_pop)*atan(1)/45))-sigma.e[1,5])^2+((elev_pop+ampli_pop*cos((270-angle_pop)*atan(1)/45))-sigma.e[1,6])^2+((elev_pop+ampli_pop*cos((315-angle_pop)*atan(1)/45))-sigma.e[1,7])^2+((elev_pop+ampli_pop*cos((0-angle_pop)*atan(1)/45))-sigma.e[1,8])^2+((elev_pop+ampli_pop*cos((45-angle_pop)*atan(1)/45))-sigma.e[1,9])^2)/(var(sigma.e[1,2:9])*7)

# Computing output sampling variables
elev_sampl <- matrix(,numbsamp,5)
lov_sampl <- matrix(,numbsamp,5)
dom_sampl <- matrix(,numbsamp,5)
ampli_sampl <- matrix(,numbsamp,5)
angle_sampl <- matrix(,numbsamp,5)
goodness_sampl <- matrix(,numbsamp,5)

# Drawing samples from population
for (i in seq(1, numbsamp, by = 1)) { 
sampl <- population[sample(populationsize, samplesize),  ]

# Computing and saving observed circumplex parameters
cormatr <- cor(sampl)
elev_sampl[i,1] <- mean(cormatr[1,2:9])
lov_sampl[i,1] <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom_sampl[i,1] <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli_sampl[i,1] <- sqrt(lov_sampl[i,1]^2+dom_sampl[i,1]^2)
angle_sampl[i,1] <- atan2(dom_sampl[i,1],lov_sampl[i,1])*45/atan(1)
goodness_sampl[i,1] <- 1-(((elev_sampl[i,1]+ampli_sampl[i,1]*cos((90-angle_sampl[i,1])*atan(1)/45))-cormatr[1,2])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((135-angle_sampl[i,1])*atan(1)/45))-cormatr[1,3])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((180-angle_sampl[i,1])*atan(1)/45))-cormatr[1,4])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((225-angle_sampl[i,1])*atan(1)/45))-cormatr[1,5])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((270-angle_sampl[i,1])*atan(1)/45))-cormatr[1,6])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((315-angle_sampl[i,1])*atan(1)/45))-cormatr[1,7])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((0-angle_sampl[i,1])*atan(1)/45))-cormatr[1,8])^2+((elev_sampl[i,1]+ampli_sampl[i,1]*cos((45-angle_sampl[i,1])*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)

# Bootstrapping circumplex parameters
boot.circum <- function(sampl,d){
resampl <- sampl[d,]
cormatr <- cor(resampl)
elev <- mean(cormatr[1,2:9])
lov <- .25*(-p7*cormatr[1,3]-cormatr[1,4]-p7*cormatr[1,5]+p7*cormatr[1,7]+cormatr[1,8]+p7*cormatr[1,9])
dom <- .25*(cormatr[1,2]+p7*cormatr[1,3]-p7*cormatr[1,5]- cormatr[1,6]-p7*cormatr[1,7]+p7*cormatr[1,9])
ampli <- sqrt(lov^2+dom^2)
angle <- atan2(dom,lov)*45/atan(1)
goodness <- 1-(((elev+ampli*cos((90-angle)*atan(1)/45))-cormatr[1,2])^2+((elev+ampli*cos((135-angle)*atan(1)/45))-cormatr[1,3])^2+((elev+ampli*cos((180-angle)*atan(1)/45))-cormatr[1,4])^2+((elev+ampli*cos((225-angle)*atan(1)/45))-cormatr[1,5])^2+((elev+ampli*cos((270-angle)*atan(1)/45))-cormatr[1,6])^2+((elev+ampli*cos((315-angle)*atan(1)/45))-cormatr[1,7])^2+((elev+ampli*cos((0-angle)*atan(1)/45))-cormatr[1,8])^2+((elev+ampli*cos((45-angle)*atan(1)/45))-cormatr[1,9])^2)/(var(cormatr[1,2:9])*7)
return(c(elev,lov,dom,ampli,angle,goodness))
}
boot.results <- boot(sampl, boot.circum, numbboot)

# Saving bootstrap results
elev_sampl[i,2] <- mean(boot.results$t[,1])
elev_sampl[i,3] <- sd(boot.results$t[,1])
elev_sampl[i,4] <- quantile(boot.results$t[,1], probs = .025)
elev_sampl[i,5] <- quantile(boot.results$t[,1], probs = .975)

lov_sampl[i,2] <- mean(boot.results$t[,2])
lov_sampl[i,3] <- sd(boot.results$t[,2])
lov_sampl[i,4] <- quantile(boot.results$t[,2], probs = .025)
lov_sampl[i,5] <- quantile(boot.results$t[,2], probs = .975)

dom_sampl[i,2] <- mean(boot.results$t[,3])
dom_sampl[i,3] <- sd(boot.results$t[,3])
dom_sampl[i,4] <- quantile(boot.results$t[,3], probs = .025)
dom_sampl[i,5] <- quantile(boot.results$t[,3], probs = .975)

ampli_sampl[i,2] <- mean(boot.results$t[,4])
ampli_sampl[i,3] <- sd(boot.results$t[,4])
ampli_sampl[i,4] <- quantile(boot.results$t[,4], probs = .025)
ampli_sampl[i,5] <- quantile(boot.results$t[,4], probs = .975)

angle_sampl[i,2] <- atan2(sum(sin(atan(1)/45*boot.results$t[,5])),sum(cos(atan(1)/45*boot.results$t[,5])))* 45/atan(1)
angle_sampl[i,3] <- acos(sum(cos(atan(1)/45*(angle_sampl[i,2]-boot.results$t[,5])))/numbboot) * 45/atan(1)
winkel <- circular(boot.results$t[,5], units = c("degrees"), rotation = c("counter"))
angle_sampl[i,4] <- quantile.circular(winkel, probs = .025)
angle_sampl[i,5] <- quantile.circular(winkel, probs = .975)

goodness_sampl[i,2] <- mean(boot.results$t[,6])
goodness_sampl[i,3] <- sd(boot.results$t[,6])
goodness_sampl[i,4] <- quantile(boot.results$t[,6], probs = .025)
goodness_sampl[i,5] <- quantile(boot.results$t[,6], probs = .975)
}

output <- matrix(,1,61)

#Population values
output[1,1] <- elev_pop
output[1,2] <- lov_pop
output[1,3] <- dom_pop
output[1,4] <- ampli_pop
output[1,5] <- angle_pop
output[1,6] <- goodness_pop

#Sampling distributions
output[1,8] <- mean(elev_sampl[,1])
output[1,9] <- sd(elev_sampl[,1])
output[1,10] <- skewness(elev_sampl[,1])
output[1,11] <- kurtosis(elev_sampl[,1])

output[1,13] <- mean(lov_sampl[,1])
output[1,14] <- sd(lov_sampl[,1])
output[1,15] <- skewness(lov_sampl[,1])
output[1,16] <- kurtosis(lov_sampl[,1])

output[1,18] <- mean(dom_sampl[,1])
output[1,19] <- sd(dom_sampl[,1])
output[1,20] <- skewness(dom_sampl[,1])
output[1,21] <- kurtosis(dom_sampl[,1])

output[1,23] <- mean(ampli_sampl[,1])
output[1,24] <- sd(ampli_sampl[,1])
output[1,25] <- skewness(ampli_sampl[,1])
output[1,26] <- kurtosis(ampli_sampl[,1])

output[1,28] <- atan2(sum(sin(atan(1)/45*angle_sampl[,1])),sum(cos(atan(1)/45*angle_sampl[,1])))*45/atan(1)
output[1,29] <- acos(sum(cos(atan(1)/45*(output[1,28]-angle_sampl[,1])))/numbsamp) * 45/atan(1)

output[1,33] <- mean(goodness_sampl[,1])
output[1,34] <- sd(goodness_sampl[,1])
output[1,35] <- skewness(goodness_sampl[,1])
output[1,36] <- kurtosis(goodness_sampl[,1])

# Mean bias of bootstrap means
output[1,38] <- output[1,8] - mean(elev_sampl[,2])
output[1,39] <- output[1,13] - mean(lov_sampl[,2])
output[1,40] <- output[1,18] - mean(dom_sampl[,2])
output[1,41] <- output[1,23] - mean(ampli_sampl[,2])
output[1,42] <- mean((angle_sampl[,2]%%360) - (angle_sampl[,1]%%360))
output[1,43] <- output[1,33] - mean(goodness_sampl[,2])

# Mean bias of bootstrap standard errors
output[1,45] <- output[1,9] - mean(elev_sampl[,3])
output[1,46] <- output[1,14] - mean(lov_sampl[,3])
output[1,47] <- output[1,19] - mean(dom_sampl[,3])
output[1,48] <- output[1,24] - mean(ampli_sampl[,3])
output[1,49] <- output[1,29] - mean(angle_sampl[,3])
output[1,50] <- output[1,34] - mean(goodness_sampl[,3])

# Empirical Non-Coverage
output[1,52] <- (sum(elev_sampl[,4]>elev_pop)+sum(elev_sampl[,5]<elev_pop))/numbsamp
output[1,53] <- (sum(lov_sampl[,4]>lov_pop)+sum(lov_sampl[,5]<lov_pop))/numbsamp
output[1,54] <- (sum(dom_sampl[,4]>dom_pop)+sum(dom_sampl[,5]<dom_pop))/numbsamp
output[1,55] <- (sum(ampli_sampl[,4]>ampli_pop)+sum(ampli_sampl[,5]<ampli_pop))/numbsamp
output[1,56] <- sum(((angle_pop-angle_sampl[,4])%%360)>((angle_pop-angle_sampl[,5])%%360))/numbsamp
output[1,57] <- (sum(goodness_sampl[,4]>goodness_pop)+sum(goodness_sampl[,5]<goodness_pop))/numbsamp

# Deviance of empirical population parameters
output[1,59] <- target.match
output[1,60] <- ipc.match

# Sample Size
output[1,61] <- samplesize

write.table(output, file="g2021_500.txt", sep="\t", dec=",")








